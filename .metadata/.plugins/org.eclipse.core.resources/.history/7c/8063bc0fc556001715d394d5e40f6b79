package chat;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;

import ocsf.client.AbstractClient;

import Entities.User;
import OurMessage.*;
import User.HomeUI;
import User.LoginUI;

/**
 * Client class represents as the user who sends the message to the server and
 * gets the message from the server.
 * 
 * @author 
 *
 */
public class Client extends AbstractClient {

	public static JFrame clientGUI;
	public static Client client;
    public static User user;
    public static boolean wait_flag=false;
    
	/**
	 * Constructor for creating the client.
	 * 
	 * @param host
	 *            is the host of the server used to connecting to the server.
	 * @param port
	 *            is the port used
	 */
    public Client (String host, int port){
    	super(host, port);
 
    }
	public Client (String host, int port, JFrame m) throws IOException  {
        super(host, port); //Call the superclass constructor
        this.clientGUI = m;
	}
	
	public void quit() {
        try {
            closeConnection();
        } catch (IOException e) {
        }
        System.exit(0);
    }
	
	public void SetUser(User n) {
		this.user = n;
    }

	/**
	 * Handles all the different type of messages received from the server and
	 * displays on its ui.
	 * 
	 * @param msg
	 *            is the message received from the server.
	 */
	@Override
	public void handleMessageFromServer(Object msg) {
		System.out.println("I am here HMFS");
		int op = ((Request)msg).getRtype();
		System.out.println("Code: "+op);
		switch(op){
		case 4:
			if(((Request)msg).getRequest() instanceof Boolean)
			{
				((HomeUI)clientGUI).logout();
			}
			else{
				//System Error
			}
			break;
		case 5://Login Case
			if(((Request)msg).getRequest() instanceof Boolean)
			{
				((LoginUI)clientGUI).lblerr.setForeground(Color.RED);
				Boolean flag = (Boolean)((Request)msg).getRequest();
				if(flag == true)
					((LoginUI)clientGUI).setstatus("Username or password is incorrect. !");
				else
					((LoginUI)clientGUI).setstatus("Your account is not Active !");
			}
			if(((Request)msg).getRequest() instanceof User)
			{ 
				((LoginUI)clientGUI).loginsuccess();
				//clientGUI.setVisible(false);
				System.out.println("I am here Request User");
				User us=(User)(((Request)msg).getRequest());
				this.user=us;
				switch(us.getAccess().getAccess()){
				case 1:
					System.out.println("Welcome Back Student");

					break;
				case 2:
					System.out.println("Welcome Back Teacher");

					break;
				case 3:
					
					//clientGUI.setVisible(false);
					System.out.println("Welcome Back System Admin");
					break;
				case 4:
					//clientGUI.setVisible(false);
					System.out.println("Welcome Back School Admin");
					break;
				case 5:
					
					System.out.println("Welcome Back Secretary");

					break;
				case 6:
					System.out.println("Welcome Back Parent");

					break;
				case 7:
					System.out.println("Welcome Back Guest");

					break;
				}
			}
			break;
		case 6:
			if(((Request)msg).getRequest() instanceof Boolean)
			{
				Client.wait_flag=true;
			}
			else{
				//System Error
			}
			break;
		}

	}
	
    /**
     * This method handles all data coming from the UI
     *
     * @param message The message from the UI.
     */
    public void handleMessageFromClientUI(Message msg) {
    	if (!isConnected()) {
            //((LoginUI) clientGUI.setst("Could not send message to server. Terminating client.");
        } else {
        	try {
				sendToServer(msg);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    	
    }


    public void handleCommand(String command) throws IOException {
    	if(command.equals("#Checklogin"))
    	{
    		try {
                openConnection();
                sendToServer(command);
                System.out.println("Connected to server!");
            } catch (IOException e) {
            }
    	}
        /*if (command.equals("#quit")) {
            quit();
        } else if (command.equals("#logoff")) {
            try {
                closeConnection();
            } catch (IOException e) {
            }
        } else if (command.contains("#sethost")) {
            if (!isConnected()) {
                String newHost = command.substring(9);
                setHost(newHost);
                System.out.println("Changed host to " + newHost);
            } else {
                System.out.println("Already connected!");
            }
        } else if (command.contains("#setport")) {
            if (!isConnected()) {
                int newPort = Integer.parseInt(command.substring(9));
                setPort(newPort);
                System.out.println("Changed port to " + newPort);
            } else {
                System.out.println("Already connected!");
            }
        } else if (command.contains("#login")) {
            if (!isConnected()) {
                try {
                    openConnection();
                    sendToServer(command);
                    System.out.println("Connected to server!");
                } catch (IOException e) {
                }
            } else {
                System.out.println("Already connected!");
            }
        } else if (command.equals("#gethost")) {
            System.out.println("Host: " + getHost());
        } else if (command.equals("#getport")) {
            System.out.println("Port: " + getPort());
        } else if (command.equals("#1")) {
            sendToServer("#1");
        } else if (command.equals("#2")) {
            sendToServer("#2");
        } else if (command.equals("#3")) {
            sendToServer("#3");
        } else if (command.equals("#4")) {
            sendToServer("#4");
        } else if (command.equals("#5")) {
            sendToServer("#5");
        } else if (command.equals("#6")) {
            sendToServer("#6");
        } else if (command.equals("#7")) {
            sendToServer("#7");
        } else if (command.equals("#8")) {
            sendToServer("#8");
        } else if (command.equals("#9")) {
            sendToServer("#9");
        } else if (command.equals("#createGame")) {
            sendToServer("#createGame");
        } else if (command.equals("#getGameList")) {
            sendToServer("#getGameList");
        } else {
            System.out.println("Command not recognized!");
        }
        */
    }
	
}
