package server;

import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

import ocsf.server.*;

import OurMessage.*;
import Entities.AccessProfiles;
import Entities.User;
public class Server extends AbstractServer {
	//Class variables ***************************************************
	  
	  /**
	   * The default port to listen on.
	   */
	  final public static int DEFAULT_PORT = 5555;
	  private Connection conn;
	  private ServerGUI serv;
	  //Constructors ****************************************************
	  
	  /**
	   * Constructs an instance of the echo server.
	   *
	   * @param port The port number to connect on.
	   */
	  
	  public Server(ServerGUI srv,int port)
	  {
		  super(port);
		  this.serv = srv;
		  srv.setVisible(true);
	  }
	  
	  //Instance methods ************************************************
	  
	  /**
	   * This method create the connection between the server and the DB
	   *
	   * @param dbName The database name.
	   * @param user mysql username.
	   * @param pass mysql password.
	   */
	  
	  public boolean initDBConnection(String dbName,String user, String pass) throws Exception
	  {
		  try 
			{
	            Class.forName("com.mysql.jdbc.Driver").newInstance();
	            conn = DriverManager.getConnection("jdbc:mysql://localhost/"+dbName+"?verifyServerCertificate=false"+ "&useSSL=false"+ "&requireSSL=false", user, pass);
	            System.out.println("SQL connection succeed");
	            return true;
	        } catch (SQLException ex) {return false;}
	  }
	 
	  /**
	   * This method handles any messages received from the client.
	   *
	   * @param msg The message received from the client , it's the query that the server should do.
	   * @param client The connection from which the message originated.
	 * @throws SQLException 
	   */
	  
	  @Override
		protected void handleMessageFromClient(Object msg, ConnectionToClient client) {
		  //Getting Current Date time
		  DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
		  LocalDateTime now = LocalDateTime.now();
		  
		  //Server Check
		  Statement stmt=null;//INSERT & SELECT Query statement;
		  PreparedStatement pstmt;//UPDATE prepared statement
		  ResultSet rs=null;
		  try 
		  {	 
			  stmt = conn.createStatement();
			  int op = ((Message)msg).GetQType();
			  switch(op){
			  case 4:
				  String[] parts = (((Message)msg).GetQuery()).split("/");
				  stmt.executeUpdate(parts[0]);
				  serv.display("["+dtf.format(now)+"] "+parts[1]+" has been disconnected!" );
				  try {
					client.sendToClient(new Request(true,QTypes.update));
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				  break;
			  case 5://Login User 
				  serv.display("Read User Details");
				  rs = stmt.executeQuery(((Message) msg).GetQuery());
				  if (rs.next()) {
					  int res=rs.getInt(5);//get status
					  if(res==1){
						  User us=new User(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),res,new AccessProfiles(rs.getInt(6)));
						  Request req=new Request(us,QTypes.getuser);
						  serv.display("ID: "+us.getID()+", Name: "+us.getName());
						  try{
							  client.sendToClient(req);
							  stmt.executeUpdate("UPDATE users SET Status = 0 WHERE ID="+ Integer.parseInt(rs.getString(1)));
							  serv.display("Updated user Status to 0");
						  }catch(IOException ex){
							 //Do Somthing
							  System.out.println("Error Sending back User Details!");
						  }
					  }else{
						  Request req=new Request(false,QTypes.getuser);
						  try{
							  client.sendToClient(req);
						  }catch(IOException ex){
							 //Do Somthing
							  System.out.println("Error Sending back false statment!");
						  }
					  }
				  }
				  else
				  {
					  Request req=new Request(true,QTypes.getuser);
					  try{
						  client.sendToClient(req);
					  }catch(IOException ex){
						 //Do Somthing
						  System.out.println("Error Sending back false statment!");
					  }
				  }
				  break;
			  case 6:
				  stmt.executeUpdate(((Message)msg).GetQuery());
				  serv.display("["+dtf.format(now)+"] User: "+client.getInfo("name")+" has been disconnected!" );
				  break;
			  }
			  
	      } catch (SQLException e2) 
		  		{
	    	  //this.set("Faild!");
	      		}
	  	}
	 	    
	  /**
	   * This method overrides the one in the superclass.  Called
	   * when the server starts listening for connections.
	   */
	  protected void serverStarted()
	  {
		  System.out.println
		    ("Server listening for connections on port " + getPort());
	  }
	  
	  /**
	   * This method overrides the one in the superclass.  Called
	   * when the server stops listening for connections.
	   */
	  protected void serverStopped()
	  {
		  System.out.println
	       ("Server has stopped listening for connections.");
	  }
	  
	  
}
